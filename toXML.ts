var fs = require("fs")
var file = fs.readFileSync("example.pwf").toString()
var result = "<!--Auto-generated by pwf parser.-->\n"+file
var out = "" //Result and out are NOT the same.
var regs = {
	"/\\/\\/(.+)/g":"<!--$1-->",
	"/\/\*([\s\S])\*\//g":"<!--$1-->",
	"/(\\w+)\s*{([\\s\\S]*)}/g":"<$1>$2</$1>",
	"/(\\w+)\s*\\[((?:\\s*\\w+=.+\\s+)+)\\]/g":(m,g1,g2)=>{
		var data = g2.split("\n").map(i=>i.trim()) //Split and trim
		data = data.filter((text)=>{
			return !!text
		})
		var obj = {}
		data.forEach((item)=>{
			var s = item.split("=")
			obj[s[0]] = s[1]
		})
		return tag("meta-"+g1,"",obj)
	}
}
function tag(name,content="",flags={}){ // Make an XML tag.
	var data = `<${name}`
	if(Object.keys(flags).length){
		var f = ""
		Object.keys(flags).forEach((flag)=>{
			f += " "
			f += flag
			f += "=\""
			f += flags[flag]
			f += "\""
		})
		data += f
	}
	if(!content){
		data += " />"
	}else{
		data += ">"
		data += content.replace(/\t|\s{1,4}$/,"")
		data += `</${name}>`
	}
	return data
}
var reBlock = /\s(.)>[\S\s]*\s+<\1/g
interface Data{
	plain?:string,
	data?:string
}
var chunks:Data[] = []
var chunk:RegExpExecArray
var lastIndex = 0;
while ((chunk = reBlock.exec(result)) !== null) {
	var before = result.substr(lastIndex, chunk.index - lastIndex)
	var current = result.substr(chunk.index, chunk[0].length)
	chunks.push({plain: before})
	chunks.push({data: current})
	lastIndex = chunk.index + chunk[0].length
}
chunks.push({plain: result.substr(lastIndex)})
chunks.forEach((chunk)=>{
	if(chunk.hasOwnProperty("data")){
		var m = chunk.data.match(/(.)>([\s\S]+)<\1/)
		var d = chunk.data.replace(/(.)>([\s\S]+)<\1/,"$2")
		var r = tag("symbol",m[2],{symbol:m[1]})
		out += r
		return
	}
	var strChunk = chunk.plain
	Object.keys(regs).forEach((reg)=>{
		var cmps = reg.match(/\/(.*)\/(.*)/)
		var r = new RegExp(cmps[1],cmps[2])
		strChunk = strChunk.replace(r,regs[reg])
	})
	out += strChunk
})
fs.writeFileSync("result.xml",out)